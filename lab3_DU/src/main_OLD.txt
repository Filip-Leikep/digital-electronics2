/***********************************************************************
 * 
 * Blink a LED in Arduino-style and use function from the delay library.
 * ATmega328P (Arduino Uno), 16 MHz, PlatformIO
 *
 * Copyright (c) 2022 Tomas Fryza
 * Dept. of Radio Electronics, Brno University of Technology, Czechia
 * This work is licensed under the terms of the MIT license.
 * 
 **********************************************************************/


/* Defines -----------------------------------------------------------*/


#define LED_1 PB1
#define LED_2 PB2
#define LED_3 PB3
#define LED_4 PB4
#define LED_5 PB5
#define LED_IND PB6

#define TL PD7
#define SHORT_DELAY 250 // Delay in milliseconds

#ifndef F_CPU
#define F_CPU 16000000 // CPU frequency in Hz required for delay funcs
#endif

/* Includes ----------------------------------------------------------*/
#include <avr/io.h>     // AVR device-specific IO definitions
#include <util/delay.h> // Functions for busy-wait delay loops
#include <gpio.h>


/* Main program ----------------------------------------------------------*/
int main(void)
{
    uint8_t running = 0;  // Local variable to keep LED status
    uint8_t check = 1;
    uint8_t btnPress;
    GPIO_mode_output(&DDRB, LED_1);
    GPIO_mode_output(&DDRB, LED_2);
    GPIO_mode_output(&DDRB, LED_3);
    GPIO_mode_output(&DDRB, LED_4);
    GPIO_mode_output(&DDRB, LED_5);
    GPIO_mode_output(&DDRB, LED_IND);
    GPIO_mode_input_nopull(&DDRD, TL);
    
    // Infinite loop
    while (1)
    {
      btnPress = GPIO_read(&PIND, TL);

      if(btnPress == 1) {
        if ((running==0) & (check==1)) {
          running = 1;
          GPIO_write_high(&PORTB, LED_IND);
          check = 0;
        }
        else if((running==1) & (check==1)) {
          running = 0;
          GPIO_write_low(&PORTB, LED_IND);
          check = 0;
        }
      }
      else {
        check = 1;
      }
      
      if(running==1){
        GPIO_toggle(&PORTB, LED_1);
        _delay_ms(SHORT_DELAY);
        GPIO_toggle(&PORTB, LED_1);
        GPIO_toggle(&PORTB, LED_2);
        _delay_ms(SHORT_DELAY);
        GPIO_toggle(&PORTB, LED_2);
        GPIO_toggle(&PORTB, LED_3);
        _delay_ms(SHORT_DELAY);
        GPIO_toggle(&PORTB, LED_3);
        GPIO_toggle(&PORTB, LED_4);
        _delay_ms(SHORT_DELAY);
        GPIO_toggle(&PORTB, LED_4);
        GPIO_toggle(&PORTB, LED_5);
        _delay_ms(SHORT_DELAY);
        GPIO_toggle(&PORTB, LED_5);
        //first direction

        GPIO_write_high(&PORTB, LED_4);
        _delay_ms(SHORT_DELAY);
        GPIO_write_low(&PORTB, LED_4);
        GPIO_write_high(&PORTB, LED_3);
        _delay_ms(SHORT_DELAY);
        GPIO_write_low(&PORTB, LED_3);
        GPIO_write_high(&PORTB, LED_2);
        _delay_ms(SHORT_DELAY);
        GPIO_write_low(&PORTB, LED_2);
        //second direction
        btnPress = GPIO_read(&PIND, TL);
      }

      else{
        //turns off all LEDs
        GPIO_write_low(&PORTB, LED_1);
        GPIO_write_low(&PORTB, LED_2);
        GPIO_write_low(&PORTB, LED_3);
        GPIO_write_low(&PORTB, LED_4);
        GPIO_write_low(&PORTB, LED_5);
      } 
    }

    // Will never reach this
    return 0;
}
**/